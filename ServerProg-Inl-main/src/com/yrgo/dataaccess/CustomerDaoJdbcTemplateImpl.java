package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import javax.annotation.PostConstruct;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

//@Repository
public class CustomerDaoJdbcTemplateImpl implements CustomerDao {

    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET CUSTOMER_ID=?, COMPANYNAME=?, EMAIL=?, TELEPOHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO ACTION (CUSTOMER_ID, COMPANYNAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";
    private static final String INSERT_CUSTOMER_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANYNAME, NOTES) VALUES (?, ?, ?)";
    private static final String CREATE_CUSTOMER_TABLE_SQL = "CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(50), COMPANYNAME VARCHAR(255), EMAIL VARCHAR(255), TELEPHONE VARCHAR(20), NOTES VARCHAR(255))";
    private static final String CREATE_CALL_TABLE_SQL = "CREATE TABLE CALL_TABLE (ID integer generated by default as identity(start with 1), TIMEANDDATE DATE, NOTES VARCHAR(255))";
    private JdbcTemplate template;

    @Autowired
    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    @PostConstruct
    private void createTables() {
        try {
        this.template.update(CREATE_CUSTOMER_TABLE_SQL);
        this.template.update(CREATE_CALL_TABLE_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the tables exists");
        }
    }

    @Override
    public void create(Customer customer) {
        this.template.update(INSERT_CUSTOMER_SQL, customer.getCustomerId(), customer.getCompanyName(), customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return template.queryForObject("SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?", new CustomerMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
        return template.query("SELECT * FROM CUSTOMER WHERE COMPANYNAME=?", new CustomerMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCustomerId(), customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query("SELECT * FROM CUSTOMER", new CustomerMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        return null;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {

    }

    class CustomerMapper implements RowMapper<Customer> {
        @Override
        public Customer mapRow(ResultSet rs, int i) throws SQLException {
            int customerId = rs.getInt("CUSTOMER_ID");
            String companyName = rs.getString("COMPANYNAME");
            String email = rs.getString("EMAIL");
            String telephone = rs.getString("TELEPHONE");
            String notes = rs.getString("NOTES");
            return new Customer("" + customerId, companyName, email, telephone, notes);
        }
    }
}
